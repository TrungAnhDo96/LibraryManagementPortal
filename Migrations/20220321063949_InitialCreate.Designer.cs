// <auto-generated />
using System;
using LibraryManagementPortal.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagementPortal.Migrations
{
    [DbContext(typeof(LibraryDBContext))]
    [Migration("20220321063949_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LibraryManagementPortal.Entities.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<string>("BookAuthor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            BookAuthor = "Someone",
                            BookName = "A Book (Vol.1)",
                            CategoryId = 1
                        },
                        new
                        {
                            BookId = 2,
                            BookAuthor = "Another one",
                            BookName = "Another Book (Vol.1)",
                            CategoryId = 2
                        },
                        new
                        {
                            BookId = 3,
                            BookAuthor = "A Teacher",
                            BookName = "B for Book",
                            CategoryId = 3
                        },
                        new
                        {
                            BookId = 4,
                            BookAuthor = "A Teacher",
                            BookName = "A for Another Book",
                            CategoryId = 3
                        },
                        new
                        {
                            BookId = 5,
                            BookAuthor = "Another one",
                            BookName = "Another Book (Vol.2)",
                            CategoryId = 2
                        },
                        new
                        {
                            BookId = 6,
                            BookAuthor = "Someone",
                            BookName = "A Book (Vol.2)",
                            CategoryId = 1
                        },
                        new
                        {
                            BookId = 7,
                            BookAuthor = "Someone",
                            BookName = "A Book (Vol.3)",
                            CategoryId = 1
                        },
                        new
                        {
                            BookId = 8,
                            BookAuthor = "Another one",
                            BookName = "Another Book (Vol.3)",
                            CategoryId = 2
                        },
                        new
                        {
                            BookId = 9,
                            BookAuthor = "A Teacher",
                            BookName = "C for Category of Books",
                            CategoryId = 3
                        });
                });

            modelBuilder.Entity("LibraryManagementPortal.Entities.BorrowRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"), 1L, 1);

                    b.Property<int?>("ProcessedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<int>("RequestedByUserId")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("ProcessedByUserId");

                    b.HasIndex("RequestedByUserId");

                    b.ToTable("BorrowRequests", (string)null);

                    b.HasData(
                        new
                        {
                            RequestId = 1,
                            RequestDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            RequestedByUserId = 2
                        },
                        new
                        {
                            RequestId = 2,
                            ProcessedByUserId = 1,
                            RequestDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 1,
                            RequestedByUserId = 3
                        },
                        new
                        {
                            RequestId = 3,
                            ProcessedByUserId = 1,
                            RequestDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 2,
                            RequestedByUserId = 3
                        });
                });

            modelBuilder.Entity("LibraryManagementPortal.Entities.BorrowRequestDetails", b =>
                {
                    b.Property<int>("BorrowRequestId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("BorrowRequestId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BorrowRequestDetails", (string)null);

                    b.HasData(
                        new
                        {
                            BorrowRequestId = 1,
                            BookId = 1
                        },
                        new
                        {
                            BorrowRequestId = 1,
                            BookId = 2
                        },
                        new
                        {
                            BorrowRequestId = 1,
                            BookId = 3
                        },
                        new
                        {
                            BorrowRequestId = 1,
                            BookId = 4
                        },
                        new
                        {
                            BorrowRequestId = 2,
                            BookId = 5
                        },
                        new
                        {
                            BorrowRequestId = 3,
                            BookId = 6
                        });
                });

            modelBuilder.Entity("LibraryManagementPortal.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryDescription = "Books about Philosophy",
                            CategoryName = "Philosophy"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryDescription = "Books containing a collection of jokes",
                            CategoryName = "Humor"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryDescription = "Books for teaching",
                            CategoryName = "Education"
                        });
                });

            modelBuilder.Entity("LibraryManagementPortal.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            FirstName = "Admin",
                            LastName = "Istrator",
                            Password = "cGFzc3dvcmQ=",
                            Role = 1,
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            FirstName = "Do",
                            LastName = "Trung Anh",
                            Password = "dHJ1bmdhbmhkbw==",
                            Role = 0,
                            UserName = "trunganhdo"
                        },
                        new
                        {
                            UserId = 3,
                            FirstName = "User",
                            LastName = "Anon",
                            Password = "dXNlcg==",
                            Role = 0,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("LibraryManagementPortal.Entities.Book", b =>
                {
                    b.HasOne("LibraryManagementPortal.Entities.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LibraryManagementPortal.Entities.BorrowRequest", b =>
                {
                    b.HasOne("LibraryManagementPortal.Entities.User", "ProcessedUser")
                        .WithMany("ProcessedRequests")
                        .HasForeignKey("ProcessedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LibraryManagementPortal.Entities.User", "RequestedUser")
                        .WithMany("BorrowRequests")
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProcessedUser");

                    b.Navigation("RequestedUser");
                });

            modelBuilder.Entity("LibraryManagementPortal.Entities.BorrowRequestDetails", b =>
                {
                    b.HasOne("LibraryManagementPortal.Entities.Book", "Book")
                        .WithMany("RequestDetails")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryManagementPortal.Entities.BorrowRequest", "BorrowRequest")
                        .WithMany("RequestDetails")
                        .HasForeignKey("BorrowRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BorrowRequest");
                });

            modelBuilder.Entity("LibraryManagementPortal.Entities.Book", b =>
                {
                    b.Navigation("RequestDetails");
                });

            modelBuilder.Entity("LibraryManagementPortal.Entities.BorrowRequest", b =>
                {
                    b.Navigation("RequestDetails");
                });

            modelBuilder.Entity("LibraryManagementPortal.Entities.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagementPortal.Entities.User", b =>
                {
                    b.Navigation("BorrowRequests");

                    b.Navigation("ProcessedRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
